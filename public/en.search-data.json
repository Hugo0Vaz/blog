{"/en/blog/soc-vs-lob/":{"data":{"":"","introduction#Introduction":"TODO: create introduction.","lob-over-soc-the-hot-take#LoB over SoC: the hot take":"","what-is-locality-of-bahaviour#What is Locality of Bahaviour?":"Locality of Behavior is a software design principle that emphasizes keeping related functionality and behaviors close together within the codebase. This principle aims to enhance code readability, maintainability, and performance by ensuring that code elements that interact frequently or belong to the same logical operation are grouped together.\nKey Aspects of Locality of Behavior: Proximity: functions, methods, or pieces of code that are related or that frequently interact are placed near each other within the same module or class. This proximity makes it easier to understand how different parts of the code work together.\nCohesion: high cohesion is a measure of how closely related the responsibilities of a single module or component are. A highly cohesive module performs a single task or a group of related tasks, and all the elements within it contribute to that task.\nReadability: by grouping related behaviors together, the code becomes more intuitive and easier to read. Developers can quickly grasp the purpose and function of a module without having to jump around different parts of the codebase.\nMaintainability: changes to related behaviors are easier to manage when those behaviors are localized. This reduces the risk of introducing bugs during maintenance and makes the code easier to update.\nPerformance: in some cases, keeping related operations close together can improve performance by enhancing cache locality and reducing the overhead associated with function calls and data access.\nBenefits of Locality of Behavior: Simplified Debugging: when related code is located together, it becomes easier to trace the flow of execution and identify where things might be going wrong.\nEnhanced Collaboration: team members can work on different parts of the system more effectively when related functionalities are grouped, as they can understand the context more quickly.\nReduced Cognitive Load: developers can focus on a smaller, more manageable portion of the code at a time, reducing the mental effort required to understand and work with the system.\nExamples of Locality of Behavior: Class Methods: in object-oriented programming, methods related to a particular class’s behavior are defined within that class. For instance, all methods manipulating an object’s state are found within that object’s class.\nModules and Packages: in modular programming, related functions and classes are grouped into modules and packages. This organization ensures that all related code is contained within a single module, making it easier to locate and manage.\nFunctions and Closures: in functional programming, functions that operate on the same data or achieve the same goal are often defined in close proximity. Closures can be used to keep related data and functions together.\nLocality of Behavior is a vital principle in software design that promotes the grouping of related functionalities to enhance readability, maintainability, and performance. By ensuring that related behaviors are kept together, developers can create code that is easier to understand, debug, and maintain. When combined effectively with other principles like Separation of Concerns, Locality of Behavior contributes to the creation of well-structured, efficient, and scalable software systems.","what-is-separations-of-concearns#What is Separations of Concearns?":"Separation of Concerns (SoC) is a fundamental design principle in software engineering and computer science that involves breaking down a software system into distinct sections, each addressing a specific concern or aspect of the system’s functionality. A “concern” in this context refers to a particular feature, behavior or piece of functionality that a program must implement.\nKey Aspects of Separation of Concerns: Modularity\nEncapsulation\nIndependence\nMaintainability\nReusability\nTestability\nExamples of Separation of Concerns: MVC Pattern (Model-View-Controller): in web development, the MVC pattern separates concerns by dividing the application into three main components: Model (data and business logic), View (user interface), and Controller (request handling and application flow).\nMicroservices Architecture: in a microservices architecture, different services are responsible for different business capabilities. Each service handles a specific concern, and services communicate with each other through well-defined APIs.\nLayered Architecture: applications are often divided into layers such as presentation, business logic, and data access layers. Each layer addresses a specific concern and interacts with adjacent layers through defined interfaces.\nBenefits of Separation of Concerns: Improved Code Organization: clear separation makes the codebase more organized and easier to navigate.\nSimplified Debugging and Maintenance: isolated modules allow developers to pinpoint and address issues more efficiently.\nEnhanced Collaboration: teams can work on different concerns concurrently without interfering with each other’s work.\nScalability: independent modules can be scaled or optimized separately, improving overall system performance.\nSeparation of Concerns is a critical design principle that helps manage the complexity of software systems. By dividing a system into distinct sections, each handling a specific concern, developers can create more maintainable, reusable, and testable code. Whether through architectural patterns like MVC, microservices, or layered architectures, SoC remains a foundational concept that underpins effective software development practices."},"title":"Separation of Concearns versus Locality of Behaviour"}}